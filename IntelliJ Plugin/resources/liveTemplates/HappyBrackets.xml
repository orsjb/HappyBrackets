<templateSet group="HappyBrackets">
  <template name="debugMain" value="/**&#10;     * This function is used when running sketch in IntelliJ IDE for debugging or testing&#10;     * @param args standard args required&#10;     */&#10;    public static void main(java.lang.String[] args) {&#10;&#10;        try {&#10;            net.happybrackets.device.HB.runDebug(java.lang.invoke.MethodHandles.lookup().lookupClass());&#10;        } catch (java.lang.Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }" description="Creates the main function for debugging within the IDE" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="accelerometerSensor" value="/*****************************************************&#10;         * Find an accelerometer sensor. If no sensor is found&#10;         * you will receive a status message&#10;         * accelerometer values typically range from -1 to + 1 &#10;         * to create this code, simply type accelerometerSensor&#10;         *****************************************************/&#10;        new net.happybrackets.device.sensors.AccelerometerListener(hb) {&#10;            @java.lang.Override&#10;            public void sensorUpdate(float x_val, float y_val, float z_val) {&#10;                /******** Write your code below this line ********/&#10;                $END$&#10;                /******** Write your code above this line ********/&#10;&#10;            }&#10;        };&#10;        /*** End accelerometerSensor code ***/" description="Inserts an accelerometer sensor listener" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="basicSamplePlayer" value="/**************************************************************&#10;         * Load a sample and play it&#10;         * &#10;         * simply type basicSamplePLayer to generate this code and press &lt;ENTER&gt; for each parameter&#10;         **************************************************************/&#10;        final int NUMBER_AUDIO_CHANNELS = $NUM_CHANNELS$; // define how many audio channels our device is using&#10;        final float INITIAL_VOLUME = $VOLUME$; // define how loud we want the sound&#10;        net.beadsproject.beads.ugens.Glide audioVolume = new net.beadsproject.beads.ugens.Glide(hb.ac, INITIAL_VOLUME);&#10;&#10;        // Define our sample name&#10;        final java.lang.String SAMPLE_NAME = &quot;$SAMPLE_NAME$&quot;;&#10;&#10;        // create our actual sample&#10;        net.beadsproject.beads.data.Sample sample = net.beadsproject.beads.data.SampleManager.sample(SAMPLE_NAME);&#10;&#10;        // test if we opened the sample successfully&#10;        if (sample != null) {&#10;            // Create our sample player&#10;            net.beadsproject.beads.ugens.SamplePlayer samplePlayer = new net.beadsproject.beads.ugens.SamplePlayer(hb.ac, sample);&#10;            // Samples are killed by default at end. We will stop this default actions so our sample will stay alive&#10;            samplePlayer.setKillOnEnd(false);&#10;            &#10;            // Connect our sample player to audio&#10;            net.beadsproject.beads.ugens.Gain gainAmplifier = new net.beadsproject.beads.ugens.Gain(hb.ac, NUMBER_AUDIO_CHANNELS, audioVolume);&#10;            gainAmplifier.addInput(samplePlayer);&#10;            hb.ac.out.addInput(gainAmplifier);&#10;&#10;            /******** Write your code below this line ********/&#10;            $END$&#10;            /******** Write your code above this line ********/&#10;        }&#10;        else&#10;        {&#10;            hb.setStatus(&quot;Failed sample &quot; + SAMPLE_NAME);&#10;        }&#10;        /*** End samplePlayer code ***/" description="creates a Simple SamplePlayer" toReformat="true" toShortenFQNames="true">
    <variable name="NUM_CHANNELS" expression="variableOfType(Integer)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <variable name="VOLUME" expression="variableOfType(Type)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <variable name="SAMPLE_NAME" expression="variableOfType(Type)" defaultValue="&quot;data/audio/Roje/i-write.wav&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gyroscopeSensor" value="/*****************************************************&#10;         * Add a gyroscope sensor listener. *&#10;         * to create this code, simply type gyroscopeSensor&#10;         *****************************************************/&#10;new net.happybrackets.device.sensors.GyroscopeListener(hb) {&#10;            @java.lang.Override&#10;            public void sensorUpdated(float pitch, float roll, float yaw) {&#10;                /******** Write your code below this line ********/&#10;                $END$&#10;                /******** Write your code above this line ********/&#10;            }&#10;        };&#10;      /*** End gyroscopeSensor code ***/" description="Inserts a gyroscope sensor listener" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="clockTimer" value="/************************************************************&#10;         * start clockTimer&#10;         * Create a clock with a interval based on the clock duration&#10;         *&#10;         * To create this, just type clockTimer&#10;         ************************************************************/&#10;        // create a clock and start changing frequency on each beat&#10;        final float CLOCK_INTERVAL = $INTERVAL$;&#10;&#10;        // Create a clock with beat interval of CLOCK_INTERVAL ms&#10;        net.beadsproject.beads.ugens.Clock clock = new net.beadsproject.beads.ugens.Clock(hb.ac, CLOCK_INTERVAL);&#10;        // connect the clock to HB&#10;        hb.ac.out.addDependent(clock);&#10;&#10;        // let us handle triggers&#10;        clock.addMessageListener(new net.beadsproject.beads.core.Bead() {&#10;            @java.lang.Override&#10;            protected void messageReceived(net.beadsproject.beads.core.Bead bead) {&#10;                // see if we are at the start of a beat&#10;                boolean start_of_beat = clock.getCount() % clock.getTicksPerBeat() == 0;&#10;                if (start_of_beat) {&#10;                    /*** Write your code to perform functions on the beat below this line ****/&#10;                    &#10;                    $END$&#10;&#10;                    /*** Write your code to perform functions on the beat above this line ****/&#10;                }&#10;                else&#10;                {&#10;                    /*** Write your code to perform functions off the beat below this line ****/&#10;&#10;                    /*** Write your code to perform functions off the beat above this line ****/&#10;                }&#10;            }&#10;        });&#10;        /*********************** end clockTimer **********************/" description="Creates a simple clock timer" toReformat="true" toShortenFQNames="true">
    <variable name="INTERVAL" expression="variableOfType(Float)" defaultValue="&quot;500&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="basicWavePlayer" value="final int NUMBER_AUDIO_CHANNELS = 1; // define how many audio channels our device is using&#10;final float INITIAL_FREQUENCY = $FREQUENCY$; // this is the frequency of the waveform we will make&#10;final float INITIAL_VOLUME = $VOLUME$; // define how loud we want the sound&#10;&#10;net.beadsproject.beads.ugens.Glide audioFrequency = new net.beadsproject.beads.ugens.Glide(hb.ac, INITIAL_FREQUENCY);&#10;net.beadsproject.beads.ugens.Glide audioVolume = new net.beadsproject.beads.ugens.Glide(hb.ac, INITIAL_VOLUME);&#10;&#10;&#10;// create a wave player to generate a waveform based on frequency and waveform type&#10;net.beadsproject.beads.ugens.WavePlayer waveformGenerator = new net.beadsproject.beads.ugens.WavePlayer(hb.ac, audioFrequency, net.beadsproject.beads.data.Buffer.SINE);&#10;&#10;// set up a gain amplifier to control the volume&#10;net.beadsproject.beads.ugens.Gain gainAmplifier = new net.beadsproject.beads.ugens.Gain(hb.ac, NUMBER_AUDIO_CHANNELS, audioVolume);&#10;&#10;// connect our WavePlayer object into the Gain object&#10;gainAmplifier.addInput(waveformGenerator);&#10;&#10;// Now plug the gain object into the audio output&#10;hb.ac.out.addInput(gainAmplifier);&#10;$END$" description="Creates minimal entries to make audio with a WavePlayer" toReformat="true" toShortenFQNames="true">
    <variable name="FREQUENCY" expression="variableOfType(Float)" defaultValue="&quot;1000&quot;" alwaysStopAt="true" />
    <variable name="VOLUME" expression="variableOfType(Float)" defaultValue="&quot;0.1f&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="beadMessage" value="new net.beadsproject.beads.core.Bead() {&#10;            @java.lang.Override&#10;            protected void messageReceived(net.beadsproject.beads.core.Bead bead) {&#10;                /*** Write your code below this line ***/&#10;                $END$&#10;                /*** Write your code above this line ***/&#10;                &#10;            }&#10;        }" description="Create a Bead message listener" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="floatSliderControl" value="/*************************************************************&#10;         * Create a Float type Dynamic Control that displays as a slider&#10;         * &#10;         * Simply type floatSliderControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createDynamicControl(this, net.happybrackets.core.control.ControlType.FLOAT, &quot;$NAME$&quot;, $INIT_VALUE$, $MIN$, $MAX$)&#10;                .addControlListener(control -&gt; {&#10;                   float control_val = (float)control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates a float type DynamicControl that displays as a slider" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;floatControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Float)" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="MIN" expression="variableOfType(Float)" defaultValue="&quot;-1&quot;" alwaysStopAt="true" />
    <variable name="MAX" expression="variableOfType(Float)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="floatTextControl" value="/*************************************************************&#10;         * Create a Float type Dynamic Control that displays as a text box&#10;         * &#10;         * Simply type floatTextControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createDynamicControl(this, net.happybrackets.core.control.ControlType.FLOAT, &quot;$NAME$&quot;, $INIT_VALUE$)&#10;                .addControlListener(control -&gt; {&#10;                   float control_val = (float)control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates a float type DynamicControl that displays as a text box" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;floatControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Type)" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="floatBuddyControl" value="/*************************************************************&#10;         * Create a Float type Dynamic Control pair that displays as a slider and text box&#10;         * &#10;         * Simply type floatBuddyControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createControlBuddyPair(this, net.happybrackets.core.control.ControlType.FLOAT, &quot;$NAME$&quot;, $INIT_VALUE$, $MIN$, $MAX$)&#10;                .addControlListener(control -&gt; {&#10;                   float control_val = (float)control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates a float type DynamicControl pair that displays as a slider and text buddies" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()suggestFirstVariableName()" defaultValue="&quot;floatControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Float)" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="MIN" expression="variableOfType(Float)" defaultValue="&quot;-1&quot;" alwaysStopAt="true" />
    <variable name="MAX" expression="variableOfType(Float)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="booleanControl" value="/*************************************************************&#10;         * Create a Boolean type Dynamic Control that displays as a check box&#10;         * &#10;         * Simply type booleanControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createDynamicControl(this, net.happybrackets.core.control.ControlType.BOOLEAN, &quot;$NAME$&quot;, $INIT_VALUE$)&#10;                .addControlListener(control -&gt; {&#10;                   boolean control_val = (boolean) control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates a boolean type DynamicControl that displays as a check box" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;booleanControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Boolean)" defaultValue="&quot;false&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="triggerControl" value="/*************************************************************&#10;         * Create a Trigger type Dynamic Control that displays as a button&#10;         * &#10;         * Simply type triggerControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createDynamicControl(this, net.happybrackets.core.control.ControlType.TRIGGER, &quot;$NAME$&quot;)&#10;                .addControlListener(control -&gt; {&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates a boolean type DynamicControl that displays as a button" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestFirstVariableName()" defaultValue="&quot;triggerControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="globalFloatControl" value="/*************************************************************&#10;         * Create a Float type Dynamic Control pair&#10;         * &#10;         * Simply type globalFloatControl to generate this code&#10;         *************************************************************/&#10;         net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createControlBuddyPair(this, net.happybrackets.core.control.ControlType.FLOAT, &quot;$NAME$&quot;, $INIT_VALUE$, $MIN$, $MAX$)&#10;                 .setControlScope(ControlScope.GLOBAL)&#10;                 .addControlListener(control -&gt; {&#10;                   float control_val = (float)control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;         /*** End DynamicControl code ***/" description="Creates a global float type DynamicControl pair" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;globalControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="variableOfType(String)" defaultValue="&quot;global control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MIN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MAX" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="intBuddyControl" value="/*************************************************************&#10;         * Create an integer type Dynamic Control pair that displays as a slider and text box&#10;         * &#10;         * Simply type intBuddyControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createControlBuddyPair(this, net.happybrackets.core.control.ControlType.INT, &quot;$NAME$&quot;, $INIT_VALUE$, $MIN$, $MAX$)&#10;                .addControlListener(control -&gt; {&#10;                   int control_val = (int)control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates an integer type DynamicControl pair that displays as a slider and text buddies" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestFirstVariableName()" defaultValue="&quot;intControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Type)" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="MIN" expression="variableOfType(Type)" defaultValue="&quot;-1&quot;" alwaysStopAt="true" />
    <variable name="MAX" expression="variableOfType(Type)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="intSliderControl" value="/*************************************************************&#10;         * Create an integer type Dynamic Control that displays as a slider&#10;         * &#10;         * Simply type intSliderControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createDynamicControl(this, net.happybrackets.core.control.ControlType.INT, &quot;$NAME$&quot;, $INIT_VALUE$, $MIN$, $MAX$)&#10;                .addControlListener(control -&gt; {&#10;                   int control_val = (int)control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates an integer type DynamicControl that displays as a slider" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;intControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;int control&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Type)" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="MIN" expression="variableOfType(Type)" defaultValue="&quot;-1&quot;" alwaysStopAt="true" />
    <variable name="MAX" expression="variableOfType(Type)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="globalIntControl" value="/*************************************************************&#10;         * Create a Float type Dynamic Control pair&#10;         * &#10;         * Simply type globalIntControl to generate this code&#10;         *************************************************************/&#10;         net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createControlBuddyPair(this, net.happybrackets.core.control.ControlType.INT, &quot;$NAME$&quot;, $INIT_VALUE$, $MIN$, $MAX$)&#10;                 .setControlScope(ControlScope.GLOBAL)&#10;                 .addControlListener(control -&gt; {&#10;                   int control_val = (int)control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;         /*** End DynamicControl code ***/" description="Creates a global integer type DynamicControl buddy pair" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;globalControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="variableOfType(String)" defaultValue="&quot;global control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Type)" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="MIN" expression="variableOfType(Type)" defaultValue="&quot;-1&quot;" alwaysStopAt="true" />
    <variable name="MAX" expression="variableOfType(Type)" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="intTextControl" value="/*************************************************************&#10;         * Create an integer type Dynamic Control that displays as a text box&#10;         * &#10;         * Simply type intTextControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createDynamicControl(this, net.happybrackets.core.control.ControlType.INT, &quot;$NAME$&quot;, $INIT_VALUE$)&#10;                .addControlListener(control -&gt; {&#10;                   int control_val = (int)control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates an integer type DynamicControl that displays as a text box" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;intControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Float)" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="globalTriggerControl" value="/*************************************************************&#10;         * Create a Trigger type Dynamic Control&#10;         * &#10;         * Simply type globalTriggerControl to generate this code&#10;         *************************************************************/&#10;         net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createControlBuddyPair(this, net.happybrackets.core.control.ControlType.TRIGGER, &quot;$NAME$&quot;)&#10;                 .setControlScope(ControlScope.GLOBAL)&#10;                 .addControlListener(control -&gt; {&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;         /*** End DynamicControl code ***/" description="Creates a global trigger DynamicControl" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;globalControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="variableOfType(String)" defaultValue="&quot;global control name&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="threadFunction" value="/***********************************************************&#10;         * Create a runnable thread object&#10;         * simply type threadFunction to generate this code&#10;         ***********************************************************/&#10;        java.lang.Thread $VARIABLE_NAME$ = new java.lang.Thread(() -&gt; {&#10;            int SLEEP_TIME = $SLEEP_TIME$;&#10;            while (true) {&#10;                /*** write your code below this line ***/&#10;                $END$&#10;&#10;                /*** write your code above this line ***/&#10;&#10;                try {&#10;                    java.lang.Thread.sleep(SLEEP_TIME);&#10;                } catch (java.lang.InterruptedException e) {&#10;                    /*** remove the break below to just resume thread or add your own action***/&#10;                    break;&#10;                    /*** remove the break above to just resume thread or add your own action ***/&#10;&#10;                }&#10;            }&#10;        });&#10;&#10;        /*** write your code you want to execute before you start the thread below this line ***/&#10;&#10;        /*** write your code you want to execute before you start the thread above this line ***/&#10;&#10;        $VARIABLE_NAME$.start();&#10;        /****************** End threadFunction **************************/" description="Creates a new thread" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE_NAME" expression="suggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <variable name="SLEEP_TIME" expression="variableOfType(Integer)" defaultValue="&quot;1000&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="globalBooleanControl" value="/*************************************************************&#10;         * Create a Boolean type Dynamic Control pair that displays as a check box&#10;         * &#10;         * Simply type globalBooleanControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createDynamicControl(this, net.happybrackets.core.control.ControlType.BOOLEAN, &quot;$NAME$&quot;, $INIT_VALUE$)&#10;                .setControlScope(ControlScope.GLOBAL)&#10;                .addControlListener(control -&gt; {&#10;                   boolean control_val = (boolean) control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates a global boolean type DynamicControl that displays as a check box" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;booleanControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Boolean)" defaultValue="&quot;false&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="textControl" value="/*************************************************************&#10;         * Create a string type Dynamic Control that displays as a text box&#10;         * &#10;         * Simply type textControl to generate this code&#10;         *************************************************************/&#10;        net.happybrackets.core.control.DynamicControl $CONTROL_NAME$ = hb.createDynamicControl(this, net.happybrackets.core.control.ControlType.TEXT, &quot;$NAME$&quot;, &quot;$INIT_VALUE$&quot;)&#10;                .addControlListener(control -&gt; {&#10;                   String control_val = (String) control.getValue();&#10;                   &#10;                   /*** Write your DynamicControl code below this line ***/&#10;                   $END$&#10;                   /*** Write your DynamicControl code above this line ***/&#10;                });&#10;        /*** End DynamicControl code ***/" description="Creates a string type DynamicControl that displays as a text box" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROL_NAME" expression="suggestVariableName()" defaultValue="&quot;booleanControl&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalizeAndUnderscore(String)" defaultValue="&quot;control name&quot;" alwaysStopAt="true" />
    <variable name="INIT_VALUE" expression="variableOfType(Boolean)" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="Add Unneccessary text" value="// Listener removed as it is unnecessary" description="Ads text to say listener is removed" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>