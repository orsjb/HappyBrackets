plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "5.2.0"

}
apply plugin: 'idea'


// Test for right version of Java in use for running this script
assert org.gradle.api.JavaVersion.current().isJava8Compatible()

idea{
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

repositories {
    //All sub-projects will now refer to the same 'libs' directory
    flatDir {
        dirs "libs"
    }
    mavenCentral()
    maven {url "https://clojars.org/repo"}
}

dependencies {
    //Add any libs directory jars, for example beads
    compile   fileTree(dir: "$rootProject.projectDir/libs", include: '*.jar')

    // config dependencies
    compile     group: 'com.google.code.gson',  name: 'gson',               version: '2.8.6'

    compile     group: 'org.json',              name: 'json',               version: '20180130'
    compile     group: 'org.nanohttpd',         name: 'nanohttpd',          version: '2.2.0'
    compile     group: 'com.squareup.okhttp3',  name: 'okhttp',             version: '4.4.0'
    // osc
    compile     group: 'de.sciss',              name: 'netutil',            version: '1.0.0'
    // pi stuff
    //compile     group: 'com.pi4j',              name: 'pi4j-core',          version: '1.1'
    // logging
    compile     group: 'ch.qos.logback',        name: 'logback-core',       version: '1.1.7'
    compile     group: 'ch.qos.logback',        name: 'logback-classic',    version: '1.1.7'
    runtime     group: 'org.codehaus.groovy',   name: 'groovy',             version: '3.0.1'
    compile     group: 'org.slf4j',             name: 'slf4j-api',          version: '1.7.7'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    
    implementation 'net.beadsproject:beads:3.2'

    testCompile group: 'junit',                 name: 'junit',              version: '4.+'
}

//don't add tutorial files to source set, they don't need to be in the final jar.
sourceSets {
    main {
        java {
            srcDirs( "src/main/java" )
        }
    }
}

task development


task config {
    //select the appropriate resources includes
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(development)) {
            //Ensure we include a production version of logback.groovy config in our classpath
            sourceSets.main.resources.srcDirs = ["config/dev", "src/main/resources"]
        } else {
            //Ensure we include a production version of logback.groovy config in our classpath
            sourceSets.main.resources.srcDirs = ["config/prod", "src/main/resources"]
        }
    }
}


//create a jar of javadocs
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// A helper for checking which jars are loaded
task listJars  {
    configurations.compile.each { File file -> println file.name }
}

task smile  {
        println ':)'
        println docsDir
}


jar {
    manifest {
        attributes 'Main-Class': 'net.happybrackets.device.DeviceMain'
    }
}

shadowJar {
    baseName = 'HB'
    classifier = ''
    manifest {
        attributes 'Main-Class': 'net.happybrackets.device.DeviceMain'
    }
}

task deploy

task deployJarAndJavaDoc  {
    copy {
        from 'build/docs/javadoc'
        into '../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/libs/docs/hb/javadoc'
    }
    copy {
        from 'build/libs/HBVersion.txt'
        into '../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/Device/HappyBrackets'
    }
    copy {
        from 'build/libs/HB.jar'
        into '../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/Device/HappyBrackets'
    }

    println "copied jars"
}


task deployPlugin  {
    copy {
        from '../IntelliJ Plugin/HappyBrackets_IntelliJ_Plugin.zip'
        into '../Distribution/HappyBrackets Developer Kit'
    }
}

// Pack our Build Jar file and the version text into a zip file so we can add it to plugin resources
task packJar (type:Zip) {
    destinationDir buildDir //set our output directory
    archiveName 'HB.zip'  //set the name of our archive

    //config
    from("build/libs/HB.jar") {
        include '*/**'
    }

    //config
    from("build/libs/HBVersion.txt") {
        include '*/**'
    }

    println "Creating device package: $buildDir/$archiveName"
}

// Packs our Javadocs
task packJavadocs (type:Zip) {
    destinationDir buildDir //set our output directory
    archiveName 'JavaDocs.zip'  //set the name of our archive

    //config
    from("build/docs") {
        include '*/**'
    }

    println "Creating device package: $buildDir/$archiveName"
}



// Packs the device runtime into a zip file
task packDeviceRuntime (type:Zip) {

    // We will add version to
    def version_text = ""
    if (file( 'build/libs/HBVersion.txt' ).exists()) {
        File file = file('build/libs/HBVersion.txt')
        version_text =  "-" + file.text
    }

    def filename ="HappyBracketsDeviceRuntime" + version_text + ".zip";

    destinationDir buildDir //set our output directory
    archiveName filename //'HappyBracketsDeviceRuntime.zip'  //set the name of our archive

    //config
    from("../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/Device") {
        include 'HappyBrackets/*/**'
    }

    println "Creating device package: $buildDir/$archiveName"
}

// this task will write the HBVersion.text complete version created in the tests into plugin resource
task versionPlugin(type:Exec){
    // write the version details into the plugin.xml  file
    def VERSION_FILENAME = 'build/libs/HBVersion.txt'
    def VERSION_RENAME_PROGRAM = '../IntelliJ Plugin/versionPlugin'


    if (file(VERSION_FILENAME).exists()) {
        File file = file(VERSION_FILENAME)
        def version_text = file.text

        commandLine VERSION_RENAME_PROGRAM, version_text
        standardOutput = new ByteArrayOutputStream()
        doLast {
            String output = standardOutput.toString()
            println output
        }

    }

}

task copyCompileVersionToPlugin {
    copy{
        from 'src/main/resources/builddate.txt'
        into '../IntelliJ Plugin/resources'
    }
}

// Packs the HB Project minus files we do not want in our project template
task packProjectTemplate (type:Zip) {
    destinationDir buildDir //set our output directory
    archiveName 'HappyBracketsProject.zip'  //set the name of our archive
    excludes = ['**/HB.jar', '**/ollie.xml', '**/HBVersion.txt', "**/libs/docs/hb/javadoc/**", '**/Device/HappyBrackets/data/classes/examples']

    //config
    from("../Distribution/HappyBrackets Developer Kit/HappyBrackets Project/") {
        include '*/**'
    }

    println "Creating project package: $buildDir/$archiveName"
}

// copy the zipped project (minus HB.jar) into plugin resources
task copyProject  {
    copy {
        from '../HappyBrackets/build/HappyBracketsProject.zip'
        into '../IntelliJ Plugin/resources/projectTemplates'
    }
}

// Copy HB jar, version and docs into plugin resources
task copyHBZip  {
    copy {
        from '../HappyBrackets/build/HB.zip'
        into '../IntelliJ Plugin/resources/projectTemplates'
    }

    copy {
        from '../HappyBrackets/build/JavaDocs.zip'
        into '../IntelliJ Plugin/resources/projectTemplates'
    }

}


// Packs the contents of distribution into a zip file
task packDevKit (type:Zip) {

    // We will add version to
    def version_text = ""
    if (file( 'build/libs/HBVersion.txt' ).exists()) {
        File file = file('build/libs/HBVersion.txt')
        version_text = "-" + file.text
    }

    def filename ="HappyBracketsDeveloperKit" + version_text + ".zip";

    destinationDir buildDir //set our output directory
    archiveName filename //'HappyBracketsDeveloperKit.zip'  //set the name of our archive

    //config
    from("../Distribution") {
        include 'HappyBrackets Developer Kit/*/**'
    }
    excludes = ['**/clean.sh', '**/HappyBrackets Project/**']

    println "Creating device package: $buildDir/$archiveName"
}


shadowJar.dependsOn config

packJar.dependsOn shadowJar

copyHBZip.dependsOn packJar
copyHBZip.dependsOn packJavadocs

copyProject.dependsOn packProjectTemplate
copyProject.dependsOn copyHBZip


deployJarAndJavaDoc.dependsOn shadowJar


//setup deploy dependencies
deploy.dependsOn build
deploy.dependsOn test
deploy.dependsOn shadowJar
deploy.dependsOn javadoc
deploy.dependsOn packProjectTemplate
deploy.dependsOn copyProject
deploy.dependsOn deployJarAndJavaDoc


packDeviceRuntime.dependsOn shadowJar
packDeviceRuntime.dependsOn deployJarAndJavaDoc

// we need to put this depending on versionPlugin to ensure that version plugin copies to intellij plugin
packDeviceRuntime.dependsOn versionPlugin
packDeviceRuntime.dependsOn copyCompileVersionToPlugin


packDevKit.dependsOn packDeviceRuntime
packDevKit.dependsOn deployPlugin


// These have been removed because the filenames get calculated before the actual build. So we will do deploy afterwards
//deploy.dependsOn packDeviceRuntime
//deploy.dependsOn deployPlugin


//development build routine
development.dependsOn deploy
